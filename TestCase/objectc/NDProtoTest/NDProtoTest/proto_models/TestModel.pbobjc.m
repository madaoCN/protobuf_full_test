// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_models/testModel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "TestModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Person);
GPBObjCClassDeclaration(Person_PhoneNumber);

#pragma mark - TestModelRoot

@implementation TestModelRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TestModelRoot_FileDescriptor

static GPBFileDescriptor *TestModelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"testModel"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Int64Model

@implementation Int64Model

@dynamic int64Value;

typedef struct Int64Model__storage_ {
  uint32_t _has_storage_[1];
  int64_t int64Value;
} Int64Model__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "int64Value",
        .dataTypeSpecific.clazz = Nil,
        .number = Int64Model_FieldNumber_Int64Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Int64Model__storage_, int64Value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Int64Model class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Int64Model__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TenInt64Model

@implementation TenInt64Model

@dynamic int64Value1;
@dynamic int64Value2;
@dynamic int64Value3;
@dynamic int64Value4;
@dynamic int64Value5;
@dynamic int64Value6;
@dynamic int64Value7;
@dynamic int64Value8;
@dynamic int64Value9;
@dynamic int64Value10;

typedef struct TenInt64Model__storage_ {
  uint32_t _has_storage_[1];
  int64_t int64Value1;
  int64_t int64Value2;
  int64_t int64Value3;
  int64_t int64Value4;
  int64_t int64Value5;
  int64_t int64Value6;
  int64_t int64Value7;
  int64_t int64Value8;
  int64_t int64Value9;
  int64_t int64Value10;
} TenInt64Model__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "int64Value1",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value2",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value3",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value4",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value4,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value4),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value5",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value5,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value6",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value6,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value6),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value7",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value7,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value7),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value8",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value8,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value8),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value9",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value9,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value9),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "int64Value10",
        .dataTypeSpecific.clazz = Nil,
        .number = TenInt64Model_FieldNumber_Int64Value10,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TenInt64Model__storage_, int64Value10),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TenInt64Model class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TenInt64Model__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\013\000\002\013\000\003\013\000\004\013\000\005\013\000\006\013\000\007\013\000\010\013\000\t\013\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DoubleModel

@implementation DoubleModel

@dynamic doubleValue;

typedef struct DoubleModel__storage_ {
  uint32_t _has_storage_[1];
  double doubleValue;
} DoubleModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "doubleValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DoubleModel_FieldNumber_DoubleValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DoubleModel__storage_, doubleValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DoubleModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DoubleModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TenDoubleModel

@implementation TenDoubleModel

@dynamic doubleValue1;
@dynamic doubleValue2;
@dynamic doubleValue3;
@dynamic doubleValue4;
@dynamic doubleValue5;
@dynamic doubleValue6;
@dynamic doubleValue7;
@dynamic doubleValue8;
@dynamic doubleValue9;
@dynamic doubleValue10;

typedef struct TenDoubleModel__storage_ {
  uint32_t _has_storage_[1];
  double doubleValue1;
  double doubleValue2;
  double doubleValue3;
  double doubleValue4;
  double doubleValue5;
  double doubleValue6;
  double doubleValue7;
  double doubleValue8;
  double doubleValue9;
  double doubleValue10;
} TenDoubleModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "doubleValue1",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue2",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue3",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue4",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue4,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue4),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue5",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue5,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue6",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue6,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue6),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue7",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue7,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue7),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue8",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue8,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue8),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue9",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue9,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue9),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "doubleValue10",
        .dataTypeSpecific.clazz = Nil,
        .number = TenDoubleModel_FieldNumber_DoubleValue10,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TenDoubleModel__storage_, doubleValue10),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TenDoubleModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TenDoubleModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\014\000\002\014\000\003\014\000\004\014\000\005\014\000\006\014\000\007\014\000\010\014\000\t\014\000\n\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StringModel

@implementation StringModel

@dynamic stringValue;

typedef struct StringModel__storage_ {
  uint32_t _has_storage_[1];
  NSString *stringValue;
} StringModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringValue",
        .dataTypeSpecific.clazz = Nil,
        .number = StringModel_FieldNumber_StringValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StringModel__storage_, stringValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StringModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StringModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TenStringModel

@implementation TenStringModel

@dynamic stringValue1;
@dynamic stringValue2;
@dynamic stringValue3;
@dynamic stringValue4;
@dynamic stringValue5;
@dynamic stringValue6;
@dynamic stringValue7;
@dynamic stringValue8;
@dynamic stringValue9;
@dynamic stringValue10;

typedef struct TenStringModel__storage_ {
  uint32_t _has_storage_[1];
  NSString *stringValue1;
  NSString *stringValue2;
  NSString *stringValue3;
  NSString *stringValue4;
  NSString *stringValue5;
  NSString *stringValue6;
  NSString *stringValue7;
  NSString *stringValue8;
  NSString *stringValue9;
  NSString *stringValue10;
} TenStringModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringValue1",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue2",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue3",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue4",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue4,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue4),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue5",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue5,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue6",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue6,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue6),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue7",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue7,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue7),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue8",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue8,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue8),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue9",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue9,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue9),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue10",
        .dataTypeSpecific.clazz = Nil,
        .number = TenStringModel_FieldNumber_StringValue10,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TenStringModel__storage_, stringValue10),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TenStringModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TenStringModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\014\000\002\014\000\003\014\000\004\014\000\005\014\000\006\014\000\007\014\000\010\014\000\t\014\000\n\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IntListModel

@implementation IntListModel

@dynamic intValuesArray, intValuesArray_Count;

typedef struct IntListModel__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *intValuesArray;
} IntListModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intValuesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = IntListModel_FieldNumber_IntValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IntListModel__storage_, intValuesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IntListModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IntListModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000intValues\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FloatListModel

@implementation FloatListModel

@dynamic floatValuesArray, floatValuesArray_Count;

typedef struct FloatListModel__storage_ {
  uint32_t _has_storage_[1];
  GPBFloatArray *floatValuesArray;
} FloatListModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "floatValuesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = FloatListModel_FieldNumber_FloatValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FloatListModel__storage_, floatValuesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FloatListModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FloatListModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000floatValues\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StringListModel

@implementation StringListModel

@dynamic stringValuesArray, stringValuesArray_Count;

typedef struct StringListModel__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *stringValuesArray;
} StringListModel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringValuesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = StringListModel_FieldNumber_StringValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StringListModel__storage_, stringValuesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StringListModel class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StringListModel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000stringValues\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Person

@implementation Person

@dynamic name;
@dynamic id_p;
@dynamic email;
@dynamic phoneArray, phoneArray_Count;

typedef struct Person__storage_ {
  uint32_t _has_storage_[1];
  float id_p;
  NSString *name;
  NSString *email;
  NSMutableArray *phoneArray;
} Person__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Person_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Person__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Person_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Person__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = Person_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Person__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Person_PhoneNumber),
        .number = Person_FieldNumber_PhoneArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Person__storage_, phoneArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Person class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Person__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Person_PhoneNumber

@implementation Person_PhoneNumber

@dynamic number;

typedef struct Person_PhoneNumber__storage_ {
  uint32_t _has_storage_[1];
  NSString *number;
} Person_PhoneNumber__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.clazz = Nil,
        .number = Person_PhoneNumber_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Person_PhoneNumber__storage_, number),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Person_PhoneNumber class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Person_PhoneNumber__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Person)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddressBook

@implementation AddressBook

@dynamic personArray, personArray_Count;

typedef struct AddressBook__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *personArray;
} AddressBook__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "personArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Person),
        .number = AddressBook_FieldNumber_PersonArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddressBook__storage_, personArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddressBook class]
                                     rootClass:[TestModelRoot class]
                                          file:TestModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddressBook__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
